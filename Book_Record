1
验证邮件地址：
模式=LocalName@DomainPrefix.DomainSuffix
匹配的正则表达式：  /^\w+@\w+/.\w{2,3}$/
但是邮件地址比它给人的第一眼印象更为复杂。为数据验证构筑可靠的邮件模式时，其实还要考虑几种基础邮件格式的变化版。
1.用户名称部分包含下划线、连字符 i-lovecube_lovers@youcube.ca
2.用户名称部分包含点号、加号tor.howard+jason@bannerocity.com
3.域名的prefix部分包含连字符 rocky@i-rock.mobi
4.域名的suffix部分包含4个字符 rocky@i-rock.mobi  
5.多一个域suffix，他只是域名的额外部分 ruby@youcube.com.nz
邮件地址呈现了模式中需要匹配可选性字符的需求   从集合中匹配可选字符
{在正则表达式里具有特殊意义的字符需要经过转义，才能把实际字符放在正则表达式里。下列字符前均需加上反斜线（\)做转义：
[ \ ^ $ . | ? * + () }
模式= LocalName@DomainPrefix.DomainSuffix
第一部分： 任何字母数字加上“ . ” “ — ” “ _  ” “ + ”
第二部分： 任何字母数字加上“ — ”
第三部分： 点号被视为域名Suffix的一部分
第四部分： 任何2,3,4个字符的字母数字，前接点号。
/^[\w\.—_\+]+@[\w—]+(\.\w{2,4})+$/

2
当变量和函数被放在对象里，他们都被当成对象成员。更详细地说，变量称为对象的特性，函数则称为对象的方法。
对象是一组有名称的特性与方法的集合。对象是一种数据类型。
类，是对象的描述；实例，则是实际对象，从类中创建。对象类是种模板，对象实例则是根据模板创建的事物。
关键字this用于设置实例拥有的特性和方法。
有种实例方法直接为类所有，这表示该方法只有一份，由所有实例共享。类拥有的实例方法。方法存储在类里，让所有实例共享一份方法代码。当方法为类所拥有时，
所有该类的实例都可访问方法，因此不需要另外复制一份。在类层，使用prototype设定隶属于类层的特性与方法，而非属于实例的。
构造函数现在只需专注于特性的创建和初始化，因为方法并未指派给特定Blog实例，指派行动即发生在构造函数外。每个方法均于prototype对象里设置，而非于
Blog()构造函数里使用关键字this。
类特性在类里存储一次，但能被所有实例访问。
每个对象都有个prototype对象，它允许在类层增加特性和方法。任何对象，甚至包括Javascript标准对象。
类方法——为类所有但无法访问实例特性的方法，不过可以访问类特性。
类方法的创建，是为类设定方法，但不使用prototype对象——仅使用类名和对象符号（点号）把方法指派给类。为了从类方法里访问类特性，你必须下探至prototype特性。
