1.在一个数组中找出最大值和最小值:
Math.max(...array) Math.min(...array)

2.see the test input:
function findMissingNumber(sequence){
  console.log(sequence);
  }
  
3.比较结果有三种情况时，用三元运算符如下:
  return (left==right)?"Balance":(left>right)?"Left":"Right";

4.Test Driven Development(TDD) writting your own tests 
CodeWars(6) kyu Word a10n(abbreviation)

5.找出指定的间隔的两个素数
function step(g, m, n) {
var j=0;
var allprime = [];
var isPrime = function(x) {for (var i=2; i*i<=x; i++) { if (x % i == 0) return false; } return true;}
for(var i = m; i <= n; i++)
{
        if(isPrime(i)) 
        {
            allprime[j++]=i;
            if(allprime.indexOf(i-g)!=-1) return [i-g, i];
            
        }
}      
    return null;
}

6.Test your ability to extend the functionality of built-in Array class with the following methods:square(),cube(),average(),sum(),even() and odd().

    square() must return a copy of the array, containing all values squared, the original array must not be changed
    cube() must return a copy of the array, containing all values cubed, the original array must not be changed
    average() must return the average of all array values, average() on an empty array must return NaN
    sum() must return the sum of all array values
    even() must return an array of all even numbers, the original array must not be changed
    odd() must return an array of all odd numbers, the original array must not be changed

Array.prototype.square = function () { return thismap(function(n){return n*n;});}
Array.prototype.cube = function () {return this.map(function(n){return n*n*n;});}
Array.prototype.average = function() {return this.sum() / this.length;}
Array.prototype.sum = function(){return this.reduce(function(a,b){return a+b;},0);}
Array.prototype.even = function(){return this.filter(function(item){return 0==item%2;});}
Array.prototype.odd = function(){return this.filter(function(item){return 0!=item%2;});}
or
Array.prototype.square = function() {
  var squared = [];
  for (var i = 0; i < this.length; i++) {
    squared[i] = Math.pow(this[i], 2);
  }
  return squared;
}
Array.prototype.cube = function() {
  var cubed = [];
  for (var i = 0; i < this.length; i++) {
    cubed[i] = Math.pow(this[i], 3);
  }
  return cubed;
}

Array.prototype.sum = function() {
  var sum = 0;
  for (var i = 0; i < this.length; i++) {
    sum += this[i];
  }
  return sum;
}

Array.prototype.average = function() {
  if (this.length == 0) return NaN;
  return this.sum() / this.length;
}

Array.prototype.even = function() {
  var evens = [];
  for (var i = 0; i < this.length; i++) {
    if (this[i] % 2 == 0) evens.push(this[i]);
  }
  return evens;
}

Array.prototype.odd = function() {
  var odds = [];
  for (var i = 0; i < this.length; i++) {
    if (this[i] % 2 == 1) odds.push(this[i]);
  }
  return odds;
}
